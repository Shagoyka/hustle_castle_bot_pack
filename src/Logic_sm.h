//
// ex: set ro:
// DO NOT EDIT.
// generated by smc (http://smc.sourceforge.net/)
// from file : Logic.sm
//

#ifndef LOGIC_SM_H
#define LOGIC_SM_H


#define SMC_USES_IOSTREAMS

#include <statemap.h>

// Forward declarations.
class StirMap;
class StirMap_MainState;
class StirMap_MapState;
class StirMap_StirState;
class StirMap_AgainState;
class StirMap_StirBuyPause;
class StirMap_OpponentState;
class StirMap_BattleLoadState;
class StirMap_BattleState;
class StirMap_BattleEndState;
class StirMap_EndLoadState;
class StirMap_OpponentReturn;
class StirMap_StirReturn;
class StirMap_MapReturn;
class StirMap_MainReturn;
class StirMap_Return;
class StirMap_Error;
class StirMap_Default;
class ArenaMap;
class ArenaMap_MainState;
class ArenaMap_MapState;
class ArenaMap_ArenaMainState;
class ArenaMap_ConfirmStartState;
class ArenaMap_ArenaReuse;
class ArenaMap_ConfirmStartReuse;
class ArenaMap_ArenaFindState;
class ArenaMap_ArenaChoice;
class ArenaMap_OpponentInfoState;
class ArenaMap_ArenaStats;
class ArenaMap_OpponentStats;
class ArenaMap_EndPhaseState;
class ArenaMap_OpponentTryState;
class ArenaMap_BattleLoadState;
class ArenaMap_BattleState;
class ArenaMap_BattleEndState;
class ArenaMap_EndLoadState;
class ArenaMap_EndLoadPauseState;
class ArenaMap_ArenaReturn;
class ArenaMap_MapReturn;
class ArenaMap_MainMail;
class ArenaMap_CheckMail;
class ArenaMap_MailReturn;
class ArenaMap_MainReturn;
class ArenaMap_Return;
class ArenaMap_Error;
class ArenaMap_Default;
class PortalMap;
class PortalMap_MainState;
class PortalMap_MapState;
class PortalMap_PortalMain;
class PortalMap_ChangeLevel;
class PortalMap_OpponentState;
class PortalMap_BattleLoadState;
class PortalMap_BattleState;
class PortalMap_BattleEndState;
class PortalMap_PortalMainReturn;
class PortalMap_OpponentReturn;
class PortalMap_MapReturn;
class PortalMap_MainReturn;
class PortalMap_Return;
class PortalMap_Error;
class PortalMap_Default;
class MainMap;
class MainMap_MainState;
class MainMap_ArenaState;
class MainMap_StirState;
class MainMap_PortalState;
class MainMap_Recover;
class MainMap_StartRecover;
class MainMap_Default;
class RecoveryMap;
class RecoveryMap_MainState;
class RecoveryMap_Bluestacks;
class RecoveryMap_Unknown;
class RecoveryMap_Return;
class RecoveryMap_Default;
class LogicState;
template<typename DERIVED> class LogicContext;
class Logic;

class LogicState :
    public statemap::State
{
public:

    LogicState(const char * const name, const int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&) {};
    virtual void Exit(LogicContext<Logic>&) {};

    virtual void Error(LogicContext<Logic>& context);
    virtual void Next(LogicContext<Logic>& context);
    virtual void Recovered(LogicContext<Logic>& context);
    virtual void Success(LogicContext<Logic>& context);

protected:

    virtual void Default(LogicContext<Logic>& context);
};

class StirMap
{
public:

    static StirMap_MainState MainState;
    static StirMap_MapState MapState;
    static StirMap_StirState StirState;
    static StirMap_AgainState AgainState;
    static StirMap_StirBuyPause StirBuyPause;
    static StirMap_OpponentState OpponentState;
    static StirMap_BattleLoadState BattleLoadState;
    static StirMap_BattleState BattleState;
    static StirMap_BattleEndState BattleEndState;
    static StirMap_EndLoadState EndLoadState;
    static StirMap_OpponentReturn OpponentReturn;
    static StirMap_StirReturn StirReturn;
    static StirMap_MapReturn MapReturn;
    static StirMap_MainReturn MainReturn;
    static StirMap_Return Return;
    static StirMap_Error Error;
};

class StirMap_Default :
    public LogicState
{
public:

    StirMap_Default(const char * const name, const int stateId)
    : LogicState(name, stateId)
    {};

};

class StirMap_MainState :
    public StirMap_Default
{
public:
    StirMap_MainState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_MapState :
    public StirMap_Default
{
public:
    StirMap_MapState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_StirState :
    public StirMap_Default
{
public:
    StirMap_StirState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_AgainState :
    public StirMap_Default
{
public:
    StirMap_AgainState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_StirBuyPause :
    public StirMap_Default
{
public:
    StirMap_StirBuyPause(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_OpponentState :
    public StirMap_Default
{
public:
    StirMap_OpponentState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_BattleLoadState :
    public StirMap_Default
{
public:
    StirMap_BattleLoadState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_BattleState :
    public StirMap_Default
{
public:
    StirMap_BattleState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_BattleEndState :
    public StirMap_Default
{
public:
    StirMap_BattleEndState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_EndLoadState :
    public StirMap_Default
{
public:
    StirMap_EndLoadState(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_OpponentReturn :
    public StirMap_Default
{
public:
    StirMap_OpponentReturn(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_StirReturn :
    public StirMap_Default
{
public:
    StirMap_StirReturn(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_MapReturn :
    public StirMap_Default
{
public:
    StirMap_MapReturn(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_MainReturn :
    public StirMap_Default
{
public:
    StirMap_MainReturn(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_Return :
    public StirMap_Default
{
public:
    StirMap_Return(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class StirMap_Error :
    public StirMap_Default
{
public:
    StirMap_Error(const char * const name, const int stateId)
    : StirMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap
{
public:

    static ArenaMap_MainState MainState;
    static ArenaMap_MapState MapState;
    static ArenaMap_ArenaMainState ArenaMainState;
    static ArenaMap_ConfirmStartState ConfirmStartState;
    static ArenaMap_ArenaReuse ArenaReuse;
    static ArenaMap_ConfirmStartReuse ConfirmStartReuse;
    static ArenaMap_ArenaFindState ArenaFindState;
    static ArenaMap_ArenaChoice ArenaChoice;
    static ArenaMap_OpponentInfoState OpponentInfoState;
    static ArenaMap_ArenaStats ArenaStats;
    static ArenaMap_OpponentStats OpponentStats;
    static ArenaMap_EndPhaseState EndPhaseState;
    static ArenaMap_OpponentTryState OpponentTryState;
    static ArenaMap_BattleLoadState BattleLoadState;
    static ArenaMap_BattleState BattleState;
    static ArenaMap_BattleEndState BattleEndState;
    static ArenaMap_EndLoadState EndLoadState;
    static ArenaMap_EndLoadPauseState EndLoadPauseState;
    static ArenaMap_ArenaReturn ArenaReturn;
    static ArenaMap_MapReturn MapReturn;
    static ArenaMap_MainMail MainMail;
    static ArenaMap_CheckMail CheckMail;
    static ArenaMap_MailReturn MailReturn;
    static ArenaMap_MainReturn MainReturn;
    static ArenaMap_Return Return;
    static ArenaMap_Error Error;
};

class ArenaMap_Default :
    public LogicState
{
public:

    ArenaMap_Default(const char * const name, const int stateId)
    : LogicState(name, stateId)
    {};

};

class ArenaMap_MainState :
    public ArenaMap_Default
{
public:
    ArenaMap_MainState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_MapState :
    public ArenaMap_Default
{
public:
    ArenaMap_MapState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaMainState :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaMainState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ConfirmStartState :
    public ArenaMap_Default
{
public:
    ArenaMap_ConfirmStartState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaReuse :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaReuse(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ConfirmStartReuse :
    public ArenaMap_Default
{
public:
    ArenaMap_ConfirmStartReuse(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaFindState :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaFindState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaChoice :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaChoice(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_OpponentInfoState :
    public ArenaMap_Default
{
public:
    ArenaMap_OpponentInfoState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaStats :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaStats(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_OpponentStats :
    public ArenaMap_Default
{
public:
    ArenaMap_OpponentStats(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_EndPhaseState :
    public ArenaMap_Default
{
public:
    ArenaMap_EndPhaseState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_OpponentTryState :
    public ArenaMap_Default
{
public:
    ArenaMap_OpponentTryState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_BattleLoadState :
    public ArenaMap_Default
{
public:
    ArenaMap_BattleLoadState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_BattleState :
    public ArenaMap_Default
{
public:
    ArenaMap_BattleState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_BattleEndState :
    public ArenaMap_Default
{
public:
    ArenaMap_BattleEndState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_EndLoadState :
    public ArenaMap_Default
{
public:
    ArenaMap_EndLoadState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_EndLoadPauseState :
    public ArenaMap_Default
{
public:
    ArenaMap_EndLoadPauseState(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_ArenaReturn :
    public ArenaMap_Default
{
public:
    ArenaMap_ArenaReturn(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_MapReturn :
    public ArenaMap_Default
{
public:
    ArenaMap_MapReturn(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_MainMail :
    public ArenaMap_Default
{
public:
    ArenaMap_MainMail(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_CheckMail :
    public ArenaMap_Default
{
public:
    ArenaMap_CheckMail(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_MailReturn :
    public ArenaMap_Default
{
public:
    ArenaMap_MailReturn(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_MainReturn :
    public ArenaMap_Default
{
public:
    ArenaMap_MainReturn(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_Return :
    public ArenaMap_Default
{
public:
    ArenaMap_Return(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class ArenaMap_Error :
    public ArenaMap_Default
{
public:
    ArenaMap_Error(const char * const name, const int stateId)
    : ArenaMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap
{
public:

    static PortalMap_MainState MainState;
    static PortalMap_MapState MapState;
    static PortalMap_PortalMain PortalMain;
    static PortalMap_ChangeLevel ChangeLevel;
    static PortalMap_OpponentState OpponentState;
    static PortalMap_BattleLoadState BattleLoadState;
    static PortalMap_BattleState BattleState;
    static PortalMap_BattleEndState BattleEndState;
    static PortalMap_PortalMainReturn PortalMainReturn;
    static PortalMap_OpponentReturn OpponentReturn;
    static PortalMap_MapReturn MapReturn;
    static PortalMap_MainReturn MainReturn;
    static PortalMap_Return Return;
    static PortalMap_Error Error;
};

class PortalMap_Default :
    public LogicState
{
public:

    PortalMap_Default(const char * const name, const int stateId)
    : LogicState(name, stateId)
    {};

};

class PortalMap_MainState :
    public PortalMap_Default
{
public:
    PortalMap_MainState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_MapState :
    public PortalMap_Default
{
public:
    PortalMap_MapState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_PortalMain :
    public PortalMap_Default
{
public:
    PortalMap_PortalMain(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_ChangeLevel :
    public PortalMap_Default
{
public:
    PortalMap_ChangeLevel(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_OpponentState :
    public PortalMap_Default
{
public:
    PortalMap_OpponentState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_BattleLoadState :
    public PortalMap_Default
{
public:
    PortalMap_BattleLoadState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_BattleState :
    public PortalMap_Default
{
public:
    PortalMap_BattleState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_BattleEndState :
    public PortalMap_Default
{
public:
    PortalMap_BattleEndState(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_PortalMainReturn :
    public PortalMap_Default
{
public:
    PortalMap_PortalMainReturn(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_OpponentReturn :
    public PortalMap_Default
{
public:
    PortalMap_OpponentReturn(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_MapReturn :
    public PortalMap_Default
{
public:
    PortalMap_MapReturn(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_MainReturn :
    public PortalMap_Default
{
public:
    PortalMap_MainReturn(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_Return :
    public PortalMap_Default
{
public:
    PortalMap_Return(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class PortalMap_Error :
    public PortalMap_Default
{
public:
    PortalMap_Error(const char * const name, const int stateId)
    : PortalMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class MainMap
{
public:

    static MainMap_MainState MainState;
    static MainMap_ArenaState ArenaState;
    static MainMap_StirState StirState;
    static MainMap_PortalState PortalState;
    static MainMap_Recover Recover;
    static MainMap_StartRecover StartRecover;
};

class MainMap_Default :
    public LogicState
{
public:

    MainMap_Default(const char * const name, const int stateId)
    : LogicState(name, stateId)
    {};

};

class MainMap_MainState :
    public MainMap_Default
{
public:
    MainMap_MainState(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class MainMap_ArenaState :
    public MainMap_Default
{
public:
    MainMap_ArenaState(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Error(LogicContext<Logic>& context);
    virtual void Next(LogicContext<Logic>& context);
    virtual void Success(LogicContext<Logic>& context);
};

class MainMap_StirState :
    public MainMap_Default
{
public:
    MainMap_StirState(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Error(LogicContext<Logic>& context);
    virtual void Next(LogicContext<Logic>& context);
    virtual void Success(LogicContext<Logic>& context);
};

class MainMap_PortalState :
    public MainMap_Default
{
public:
    MainMap_PortalState(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Error(LogicContext<Logic>& context);
    virtual void Next(LogicContext<Logic>& context);
    virtual void Success(LogicContext<Logic>& context);
};

class MainMap_Recover :
    public MainMap_Default
{
public:
    MainMap_Recover(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

class MainMap_StartRecover :
    public MainMap_Default
{
public:
    MainMap_StartRecover(const char * const name, const int stateId)
    : MainMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
    virtual void Recovered(LogicContext<Logic>& context);
};

class RecoveryMap
{
public:

    static RecoveryMap_MainState MainState;
    static RecoveryMap_Bluestacks Bluestacks;
    static RecoveryMap_Unknown Unknown;
    static RecoveryMap_Return Return;
};

class RecoveryMap_Default :
    public LogicState
{
public:

    RecoveryMap_Default(const char * const name, const int stateId)
    : LogicState(name, stateId)
    {};

};

class RecoveryMap_MainState :
    public RecoveryMap_Default
{
public:
    RecoveryMap_MainState(const char * const name, const int stateId)
    : RecoveryMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class RecoveryMap_Bluestacks :
    public RecoveryMap_Default
{
public:
    RecoveryMap_Bluestacks(const char * const name, const int stateId)
    : RecoveryMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class RecoveryMap_Unknown :
    public RecoveryMap_Default
{
public:
    RecoveryMap_Unknown(const char * const name, const int stateId)
    : RecoveryMap_Default(name, stateId)
    {};

    virtual void Entry(LogicContext<Logic>&);
    virtual void Next(LogicContext<Logic>& context);
};

class RecoveryMap_Return :
    public RecoveryMap_Default
{
public:
    RecoveryMap_Return(const char * const name, const int stateId)
    : RecoveryMap_Default(name, stateId)
    {};

    virtual void Next(LogicContext<Logic>& context);
};

template<typename DERIVED>
class LogicContext :
    public statemap::FSMContext
{
public:

    explicit LogicContext()
    : FSMContext(MainMap::MainState)
    {};

    LogicContext(const statemap::State& state)
    : FSMContext(state)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    inline Logic& getOwner()
    {
        return (*static_cast<DERIVED*>(this));
    };

    inline LogicState& getState()
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return dynamic_cast<LogicState&>(*_state);
    };

    inline void Error()
    {
        getState().Error(*this);
    };

    inline void Next()
    {
        getState().Next(*this);
    };

    inline void Recovered()
    {
        getState().Recovered(*this);
    };

    inline void Success()
    {
        getState().Success(*this);
    };
};


#endif // LOGIC_SM_H

//
// Local variables:
//  buffer-read-only: t
// End:
//
